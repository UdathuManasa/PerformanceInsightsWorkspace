<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_1366865_performa_time_tracking</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Update Task on UPDATE Time Tracking </name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
    // Get the related task record from the task_tracking table
    var taskGr = new GlideRecord('x_1366865_performa_task_tracking');
    taskGr.addQuery('issue_number', current.getValue('task_reference'));
    taskGr.addQuery('user_id', current.getValue('user'));
    taskGr.query();
    
    if (taskGr.next()) {
        var expectedTimeForDevelopment = parseFloat(taskGr.getValue('expected_time_for_development')) || 0;
        var expectedTimeForAnalysis = parseFloat(taskGr.getValue('expected_time_for_analysis')) || 0;

		var finishedTimeForAnalysis = parseFloat(taskGr.getValue('time_taken_for_analysis')) || 0;
        var finishedTimeForDevelopment = parseFloat(taskGr.getValue('time_taken_for_development')) || 0;

        // Retrieve previous values
        var oldTimeForDevelopment = parseFloat(previous.getValue('time_taken_for_development')) || 0;
        var oldTimeForAnalysis = parseFloat(previous.getValue('time_taken_for_analysis')) || 0;

        // Retrieve new values
        var newTimeForDevelopment = parseFloat(current.getValue('time_taken_for_development')) || 0;
        var newTimeForAnalysis = parseFloat(current.getValue('time_taken_for_analysis')) || 0;

        // Calculate the accumulated time by subtracting old values and adding new values
        var accumulatedTimeForDevelopment = (newTimeForDevelopment - oldTimeForDevelopment) + finishedTimeForDevelopment;
        var accumulatedTimeForAnalysis = (newTimeForAnalysis - oldTimeForAnalysis) + finishedTimeForAnalysis;

		// gs.addInfoMessage("finishedTimeForAnalysis : " + finishedTimeForAnalysis + " finishedTimeForDevelopment : " + finishedTimeForDevelopment);
		// gs.addInfoMessage("oldTimeForDevelopment : " + oldTimeForDevelopment + " oldTimeForAnalysis : " + oldTimeForAnalysis);
		// gs.addInfoMessage("newTimeForDevelopment : " + newTimeForDevelopment + " newTimeForAnalysis : " + newTimeForAnalysis);
		// gs.addInfoMessage("accumulatedTimeForDevelopment : " + accumulatedTimeForDevelopment + " accumulatedTimeForAnalysis : " + accumulatedTimeForAnalysis);
		// gs.addInfoMessage("expectedTimeForDevelopment : " + expectedTimeForDevelopment + " expectedTimeForAnalysis : " + expectedTimeForAnalysis);

		// Check if the time taken for development exceeds the expected time
        if (accumulatedTimeForDevelopment > expectedTimeForDevelopment) {
            gs.addErrorMessage('Time taken for development exceeds the expected time of ' + expectedTimeForDevelopment + ' hours.');
            current.setAbortAction(true); // Prevent the record from being saved
            return;
        }

        // Check if the time taken for analysis exceeds the expected time
        if (accumulatedTimeForAnalysis > expectedTimeForAnalysis) {
            gs.addErrorMessage('Time taken for analysis exceeds the expected time of ' + expectedTimeForAnalysis + ' hours.');
            current.setAbortAction(true); // Prevent the record from being saved
            return;
        }

        // Calculate Percentages
        var percentageForDevelopment = (expectedTimeForDevelopment > 0) ? (accumulatedTimeForDevelopment / expectedTimeForDevelopment) * 100 : 0;
        var percentageForAnalysis = (expectedTimeForAnalysis > 0) ? (accumulatedTimeForAnalysis / expectedTimeForAnalysis) * 100 : 0;

        // Update Meeting Hours
        var oldMeetingHours = parseFloat(previous.getValue('time_taken_for_meeting')) || 0;
        var newMeetingHours = parseFloat(current.getValue('time_taken_for_meeting')) || 0;
        var updatedMeetingHours = (newMeetingHours - oldMeetingHours) + parseFloat(taskGr.getValue('time_taken_for_meeting')) || 0;


		// Update Workaround and Blocker
        var timeTrackingWorkaround = current.getValue('workaround') || '';
        var timeTrackingBlocker = current.getValue('blocker') || '';
        var taskWorkaround = taskGr.getValue('workaround') || '';
        var taskBlocker = taskGr.getValue('blocker') || '';
		// gs.addInfoMessage("timeTrackingWorkaround "+timeTrackingWorkaround + " timeTrackingBlocker : "+timeTrackingBlocker+" taskWorkaround : "+taskWorkaround+" taskBlocker : "+taskBlocker);
        // Remove old entries from taskWorkaround and taskBlocker
		var updatedWorkaround;
		if(taskWorkaround !== ''){
			updatedWorkaround = taskWorkaround
            .split('; ')
            .filter(value => value.trim() !== previous.getValue('workaround').trim() && value.trim() !== '')
            .join('; ')
            .replace(/;{2,}/g, ';') // Remove multiple semicolons
            .trim();
		}else{
			updatedWorkaround =  timeTrackingWorkaround;
		}
		var updatedBlocker;
		if(taskBlocker !== ''){
			updatedBlocker = taskBlocker
				.split('; ')
				.filter(value => value.trim() !== previous.getValue('blocker').trim() && value.trim() !== '')
				.join('; ')
				.replace(/;{2,}/g, ';') // Remove multiple semicolons
				.trim();
		}else{
			updatedBlocker = timeTrackingBlocker;
		}
		// gs.addInfoMessage("updatedWorkaround : "+updatedWorkaround+" updatedBlocker : "+updatedBlocker);
        // Update the task_tracking record
        taskGr.setValue('time_taken_for_development', accumulatedTimeForDevelopment);
        taskGr.setValue('time_taken_for_analysis', accumulatedTimeForAnalysis);
        taskGr.setValue('percentage_for_development', percentageForDevelopment);
        taskGr.setValue('percentage_for_analysis', percentageForAnalysis);
        taskGr.setValue('time_taken_for_meeting', updatedMeetingHours);
		taskGr.setValue('workaround', updatedWorkaround);
        taskGr.setValue('blocker', updatedBlocker);
        taskGr.update();
    } else {
        gs.addErrorMessage('Associated task could not be found.');
        current.setAbortAction(true); // Prevent the record from being saved
    }
})(current, previous);
]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-08-13 21:14:14</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>b21c623cc30892106248f6edd401315d</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>Update Task on UPDATE Time Tracking </sys_name>
        <sys_overrides/>
        <sys_package display_value="Performance Insight Workspace" source="x_1366865_performa">d00819a4c34c12106248f6edd4013175</sys_package>
        <sys_policy/>
        <sys_scope display_value="Performance Insight Workspace">d00819a4c34c12106248f6edd4013175</sys_scope>
        <sys_update_name>sys_script_b21c623cc30892106248f6edd401315d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-14 07:28:54</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=b21c623cc30892106248f6edd401315d"/>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>b21c623cc30892106248f6edd401315d</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-08-13 21:14:14</sys_created_on>
        <sys_id>84fd623cc30892106248f6edd401311d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-13 21:14:14</sys_updated_on>
        <table>sys_script</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
